#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef NAUTILUSUISDK_SWIFT_H
#define NAUTILUSUISDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import NautilusContainerSDK;
@import NautilusCoreSDK;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NautilusUISDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS("_TtC13NautilusUISDK17ActivityStackView")
@interface ActivityStackView : UIStackView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC13NautilusUISDK9CellWidth")
@interface CellWidth : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class NSString;
@class UIImage;
enum NautilusBorderRadiusStyle : NSInteger;
@class UIEvent;
@class UIView;

SWIFT_CLASS("_TtC13NautilusUISDK15ContainedButton")
@interface ContainedButton : UIControl
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColorDisabled;
@property (nonatomic) IBInspectable CGFloat titleFontSize;
@property (nonatomic) IBInspectable CGFloat titleFontSizeDisabled;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable fillColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable fillColorDisabled;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable outlineColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable outlineColorDisabled;
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable image;
@property (nonatomic) IBInspectable UIEdgeInsets stackViewInsets;
@property (nonatomic) IBInspectable enum NautilusBorderRadiusStyle borderRadiusStyle;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)awakeFromNib;
- (void)prepareForInterfaceBuilder;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end

typedef SWIFT_ENUM(NSInteger, NautilusBorderRadiusStyle, open) {
  NautilusBorderRadiusStyleNone = 0,
  NautilusBorderRadiusStyleSmall = 1,
  NautilusBorderRadiusStyleMidium = 2,
  NautilusBorderRadiusStyleLarge = 3,
  NautilusBorderRadiusStylePill = 4,
};

typedef SWIFT_ENUM(NSInteger, ContentsColumn, open) {
  ContentsColumnOne = 1,
  ContentsColumnTwo = 2,
};


/// コンテンツCollectionView全体のレイアウト
SWIFT_CLASS("_TtC13NautilusUISDK18ContentsFlowLayout")
@interface ContentsFlowLayout : UICollectionViewFlowLayout
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
@end

@class NSIndexPath;
@class UICollectionViewLayoutAttributes;

/// コンテンツCollectionView全体のレイアウト
SWIFT_CLASS("_TtC13NautilusUISDK14ContentsLayout")
@interface ContentsLayout : UICollectionViewLayout
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (void)prepareLayout;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NautilusUISDK11GhostButton")
@interface GhostButton : UIControl
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColorDisabled;
@property (nonatomic) IBInspectable CGFloat titleFontSize;
@property (nonatomic) IBInspectable CGFloat titleFontSizeDisabled;
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
@property (nonatomic) IBInspectable UIEdgeInsets buttonTitleInsets;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)awakeFromNib;
- (void)prepareForInterfaceBuilder;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13NautilusUISDK8HTMLView")
@interface HTMLView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)updateConstraints;
@end


/// ページセルボタンのデフォルト設定
SWIFT_CLASS("_TtC13NautilusUISDK12MACellButton")
@interface MACellButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


/// ページセルラベルのデフォルト設定
SWIFT_CLASS("_TtC13NautilusUISDK11MACellLabel")
@interface MACellLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// ページセルサブラベルのデフォルト設定
SWIFT_CLASS("_TtC13NautilusUISDK14MASubCellLabel")
@interface MASubCellLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class WKUserContentController;
@class WKScriptMessage;

/// SDKとアプリで利用する汎用的な<code>WKScriptMessageHandler</code>の基本クラス
SWIFT_CLASS("_TtC13NautilusUISDK38NautilusWebViewWebScriptMessageHandler")
@interface NautilusWebViewWebScriptMessageHandler : NSObject <WKScriptMessageHandler>
/// JavaScriptから渡されたメッセージを処理する
/// important:
/// 継承先で必ず処理を実装すること
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13NautilusUISDK40NautilusAnalyticsWebScriptMessageHandler")
@interface NautilusAnalyticsWebScriptMessageHandler : NautilusWebViewWebScriptMessageHandler
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end


SWIFT_CLASS("_TtC13NautilusUISDK33NautilusAppContentsCollectionView")
@interface NautilusAppContentsCollectionView : UICollectionView
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NautilusAppContentsCollectionView (SWIFT_EXTENSION(NautilusUISDK)) <UICollectionViewDelegateFlowLayout>
@end


/// コンテンツページのベースとなるPageViewController
SWIFT_CLASS("_TtC13NautilusUISDK29NautilusAppPageViewController")
@interface NautilusAppPageViewController : UIPageViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary<UIPageViewControllerOptionsKey, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

@interface NautilusAppPageViewController (SWIFT_EXTENSION(NautilusUISDK)) <UIPageViewControllerDataSource>
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
@end


/// カテゴリコレクションビュー
SWIFT_CLASS("_TtC13NautilusUISDK18NautilusAppTabView")
@interface NautilusAppTabView : UICollectionView
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// カテゴリーセルの実際のレイアウト
/// width によってサイズが違う
SWIFT_CLASS("_TtC13NautilusUISDK22NautilusAppTabViewCell")
@interface NautilusAppTabViewCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic, getter=isSelected) BOOL selected;
- (UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes SWIFT_WARN_UNUSED_RESULT;
@end

@protocol NautilusAppTopBarDelegate;
@protocol NautilusAppTopBarDataSource;

/// 画面上部に配置するタブView
SWIFT_CLASS("_TtC13NautilusUISDK17NautilusAppTopBar")
@interface NautilusAppTopBar : UIView
@property (nonatomic, weak) IBOutlet id <NautilusAppTopBarDelegate> _Nullable delegate;
@property (nonatomic, weak) IBOutlet id <NautilusAppTopBarDataSource> _Nullable dataSource;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
@end

@class NautilusAppTopBarItemView;

/// 画面上部に配置するタブViewに表示するデータを管理するDataSource
SWIFT_PROTOCOL("_TtP13NautilusUISDK27NautilusAppTopBarDataSource_")
@protocol NautilusAppTopBarDataSource
/// タブViewに表示するデータの数
- (NSInteger)numberOfItemsIn:(NautilusAppTopBar * _Nonnull)appTopBar SWIFT_WARN_UNUSED_RESULT;
/// タブViewに表示するViewを返す
- (NautilusAppTopBarItemView * _Nonnull)appTopBar:(NautilusAppTopBar * _Nonnull)appTopBar viewForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


/// 画面上部に配置するタブViewで行われた処理を扱うためのdelegate
SWIFT_PROTOCOL("_TtP13NautilusUISDK25NautilusAppTopBarDelegate_")
@protocol NautilusAppTopBarDelegate
/// タブから要素が選択された
- (void)appTopBar:(NautilusAppTopBar * _Nonnull)appTopBar didSelectedAt:(NSInteger)index;
@end

@class NSBundle;

SWIFT_CLASS("_TtC13NautilusUISDK27NautilusAppTopBarController")
@interface NautilusAppTopBarController : UIViewController <NautilusAppTopBarDataSource, NautilusAppTopBarDelegate, UIPageViewControllerDataSource, UIPageViewControllerDelegate>
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)appTopBar:(NautilusAppTopBar * _Nonnull)appTopBar didSelectedAt:(NSInteger)index;
- (NautilusAppTopBarItemView * _Nonnull)appTopBar:(NautilusAppTopBar * _Nonnull)appTopBar viewForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfItemsIn:(NautilusAppTopBar * _Nonnull)appTopBar SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP13NautilusUISDK35NautilusAppTopBarControllerDelegate_")
@protocol NautilusAppTopBarControllerDelegate
- (NSInteger)numberOfViewControllers:(NautilusAppTopBarController * _Nonnull)appTopBarController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nonnull)appTopBarController:(NautilusAppTopBarController * _Nonnull)appTopBarController viewControllerAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)appTopBarController:(NautilusAppTopBarController * _Nonnull)appTopBarController indexOfViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
@end



@class UITouch;

/// 画面上部に配置するタブ内に置くViewの基底クラス
SWIFT_CLASS("_TtC13NautilusUISDK25NautilusAppTopBarItemView")
@interface NautilusAppTopBarItemView : UIView
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// 画面上部に配置するタブ内に置くView
/// タイトルテキストを設定可能
SWIFT_CLASS("_TtC13NautilusUISDK36NautilusAppTopBarItemTitledLabelView")
@interface NautilusAppTopBarItemTitledLabelView : NautilusAppTopBarItemView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
@end


@class UIGestureRecognizer;

/// ViewController内に、Bottom Sheetを表示するためのViewController
/// このクラスを継承したクラスが、メインの画面を表示する
SWIFT_CLASS("_TtC13NautilusUISDK42NautilusBottomSheetContainerViewController")
@interface NautilusBottomSheetContainerViewController : UIViewController <UIGestureRecognizerDelegate>
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewSafeAreaInsetsDidChange;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NautilusBottomSheetContainerViewController</code> のbottom sheetの中身として表示するViewController
SWIFT_CLASS("_TtC13NautilusUISDK40NautilusBottomSheetContentViewController")
@interface NautilusBottomSheetContentViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NautilusUISDK16NautilusCategory")
@interface NautilusCategory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol NautilusCheckBoxGroupDataSource;
@protocol NautilusCheckBoxGroupDelegate;

/// チェックボックスビュー
SWIFT_CLASS("_TtC13NautilusUISDK21NautilusCheckBoxGroup")
@interface NautilusCheckBoxGroup : UIView
/// チェックボックスの項目データ
@property (nonatomic, weak) id <NautilusCheckBoxGroupDataSource> _Nullable dataSource;
/// チェックボックスの選択を伝達する
@property (nonatomic, weak) id <NautilusCheckBoxGroupDelegate> _Nullable delegate;
/// タイトルラベルの文字列
@property (nonatomic, copy) NSString * _Nullable checkBoxGroupTitle;
/// 現在選択されている項目の Index 配列(get)
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull indicesForSelectedItem;
/// コードから初期化する
/// \param frame CGRect
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// チェックボックスビューのタイトルと項目数をロードします
/// datasourceを設定してください
- (void)loadItems;
/// 対象のIndexの項目を選択状態にする
- (void)selectItemAt:(NSInteger)index;
/// 対象のIndexの項目の選択状態を解除する
- (void)deselectItemAt:(NSInteger)index;
@end


/// チェックボックスの項目の管理
SWIFT_PROTOCOL("_TtP13NautilusUISDK31NautilusCheckBoxGroupDataSource_")
@protocol NautilusCheckBoxGroupDataSource
/// 項目数
- (NSInteger)numberOfCheckItems:(NautilusCheckBoxGroup * _Nonnull)checkBoxGroup SWIFT_WARN_UNUSED_RESULT;
/// 指定されたIndexの項目のタイトルの文字列
- (NSString * _Nonnull)checkBoxItemTitle:(NautilusCheckBoxGroup * _Nonnull)checkBoxGroup at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


/// チェックボックスの選択を伝達する
SWIFT_PROTOCOL("_TtP13NautilusUISDK29NautilusCheckBoxGroupDelegate_")
@protocol NautilusCheckBoxGroupDelegate
/// 選択された項目のIndexを渡す
- (void)checkBoxGroup:(NautilusCheckBoxGroup * _Nonnull)checkBoxGroup didSelect:(NSInteger)index;
/// 選択解除された項目のIndexを渡す
- (void)checkBoxGroup:(NautilusCheckBoxGroup * _Nonnull)checkBoxGroup didDeselect:(NSInteger)index;
@end


/// MA2.0で設定値から指定する色の一覧
SWIFT_PROTOCOL("_TtP13NautilusUISDK13NautilusColor_")
@protocol NautilusColor
/// プライマリーカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryColor;
/// オンプライマリーカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull onPrimaryColor;
/// プライマリーカラー（コンテナ）
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryColorContainer;
/// オンプライマリーカラー（コンテナ）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onPrimaryColorContainer;
/// フォーカスカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull focusColor;
/// ファンデーションカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull foundationColor;
/// ファンデーションカラー（Low）
@property (nonatomic, readonly, strong) UIColor * _Nonnull foundationColorLow;
/// オンファンデーションカラー（Low）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorLow;
/// オンファンデーションカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColor;
/// オンファンデーションカラー（ModestText）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestText;
/// オンファンデーションカラー（ModestComponent）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestComponent;
/// オンファンデーションカラー（ModestSeparateThin）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestSeparateThin;
/// オンファンデーションカラー（ModestSeparateBold）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestSeparateBold;
/// オンファンデーションカラー（ModestSeparateText）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestSeparateText;
/// シャドーカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull shadowColor;
/// オーバーレイカラー（Deep）
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColorDeep;
/// オーバーレイカラー（Dark）
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColorDark;
/// ナビゲーションバーの背景色
@property (nonatomic, readonly, strong) UIColor * _Nonnull topBarColor;
/// ナビゲーションバーの文字・アイコン色
@property (nonatomic, readonly, strong) UIColor * _Nonnull onTopBarColor;
/// Disable カラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull disableColor;
/// オン Disable カラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull onDisableColor;
/// アクセントカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor;
/// テキストリンクカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull textLinkColor;
@end


SWIFT_CLASS("_TtC13NautilusUISDK23NautilusCommonErrorView")
@interface NautilusCommonErrorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@protocol NautilusDatePickerGroupDelegate;
@class NSLocale;
@class NSCalendar;
@class NSTimeZone;
@class NSDate;

/// DatePicker 日付選択ビュー
SWIFT_CLASS("_TtC13NautilusUISDK23NautilusDatePickerGroup")
@interface NautilusDatePickerGroup : UIView
/// 日付の選択を伝達する
@property (nonatomic, weak) id <NautilusDatePickerGroupDelegate> _Nullable delegate;
/// タイトルラベルの文字列
@property (nonatomic, copy) NSString * _Nullable datePickerTitle;
/// 内部的に保持しているdatePickerTextField.placeholderへのアクセスを行う
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// 内部的に保持しているdatePicker.localeへのアクセスを行う
@property (nonatomic, copy) NSLocale * _Nullable locale;
/// 内部的に保持しているdatePicker.calendarへのアクセスを行う
@property (nonatomic, copy) NSCalendar * _Nonnull calendar;
/// 内部的に保持しているdatePicker.timeZoneへのアクセスを行う
@property (nonatomic, copy) NSTimeZone * _Nullable timeZone;
/// 内部的に保持しているdatePicker.modeへのアクセスを行う
@property (nonatomic) enum UIDatePickerMode datePickerMode;
/// 内部的に保持しているdatePicker.dateへのアクセスを行う
@property (nonatomic, copy) NSDate * _Nullable date;
/// 内部的に保持しているdatePicker.minimumDateへのアクセスを行う
@property (nonatomic, copy) NSDate * _Nullable minimumDate;
/// 内部的に保持しているdatePicker.maximumDateへのアクセスを行う
@property (nonatomic, copy) NSDate * _Nullable maximumDate;
/// テキストフィールドに表示する日付のフォーマット
/// デフォルトは”yyyy/MM/dd”
@property (nonatomic, copy) NSString * _Nonnull dateFormat;
/// コードから初期化する
/// \param frame CGRect
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// 日付の選択を伝達する
SWIFT_PROTOCOL("_TtP13NautilusUISDK31NautilusDatePickerGroupDelegate_")
@protocol NautilusDatePickerGroupDelegate
/// 選択された日付を渡す
- (void)datePickerGroup:(NautilusDatePickerGroup * _Nonnull)_ dateChanged:(NSDate * _Nonnull)date;
@end

@protocol NautilusDropdownGroupDataSource;
@protocol NautilusDropdownGroupDelegate;

/// ドロップダウンビュー
SWIFT_CLASS("_TtC13NautilusUISDK21NautilusDropdownGroup")
@interface NautilusDropdownGroup : UIView
/// ドロップダウンの項目の管理
@property (nonatomic, weak) id <NautilusDropdownGroupDataSource> _Nullable dataSource;
/// ドロップダウンの選択を伝達する
@property (nonatomic, weak) id <NautilusDropdownGroupDelegate> _Nullable delegate;
/// タイトルラベルの文字列
@property (nonatomic, copy) NSString * _Nullable dropdownGroupTitle;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// 対象のIndexの項目を選択状態にする
- (void)selectItemAt:(NSInteger)index;
@end


/// ドロップダウンの項目の管理
SWIFT_PROTOCOL("_TtP13NautilusUISDK31NautilusDropdownGroupDataSource_")
@protocol NautilusDropdownGroupDataSource
/// 項目数
- (NSInteger)numberOfDropdownItems:(NautilusDropdownGroup * _Nonnull)dropdownGroup SWIFT_WARN_UNUSED_RESULT;
/// 指定されたIndexの項目のタイトルの文字列
- (NSString * _Nonnull)dropdownItemTitle:(NautilusDropdownGroup * _Nonnull)dropdownGroup at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end

@class UIAlertController;

/// ドロップダウンの選択を伝達する
SWIFT_PROTOCOL("_TtP13NautilusUISDK29NautilusDropdownGroupDelegate_")
@protocol NautilusDropdownGroupDelegate
/// 選択された項目のIndexを渡す
- (void)dropdownGroup:(NautilusDropdownGroup * _Nonnull)dropdownGroup didSelect:(NSInteger)index;
/// アクションシートを表示する
- (void)dropdownGroup:(NautilusDropdownGroup * _Nonnull)dropdownGroup actionSheet:(UIAlertController * _Nonnull)actionSheet;
@end

@protocol NautilusGridViewDataSource;
@protocol NautilusGridViewDelegate;

SWIFT_CLASS("_TtC13NautilusUISDK16NautilusGridView")
@interface NautilusGridView : UIView <UICollectionViewDataSource, UICollectionViewDelegate>
@property (nonatomic, weak) IBOutlet id <NautilusGridViewDataSource> _Nullable dataSource;
@property (nonatomic, weak) IBOutlet id <NautilusGridViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC13NautilusUISDK20NautilusGridViewCell")
@interface NautilusGridViewCell : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP13NautilusUISDK22NautilusGridViewLayout_")
@protocol NautilusGridViewLayout
@property (nonatomic) NSInteger numberOfColumns;
@property (nonatomic, strong) NautilusGridView * _Nullable gridView;
@end


SWIFT_CLASS("_TtC13NautilusUISDK36NautilusGridViewCollectionFlowLayout")
@interface NautilusGridViewCollectionFlowLayout : UICollectionViewFlowLayout <NautilusGridViewLayout>
@property (nonatomic) NSInteger numberOfColumns;
@property (nonatomic, weak) NautilusGridView * _Nullable gridView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareLayout;
@end


SWIFT_PROTOCOL("_TtP13NautilusUISDK26NautilusGridViewDataSource_")
@protocol NautilusGridViewDataSource
- (NSInteger)numberOfSectionsIn:(NautilusGridView * _Nonnull)gridView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)gridView:(NautilusGridView * _Nonnull)gridView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NautilusGridViewCell * _Nonnull)gridView:(NautilusGridView * _Nonnull)gridView cellForItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)gridView:(NautilusGridView * _Nonnull)gridView cellHeightThatFitsTo:(CGSize)size forItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP13NautilusUISDK24NautilusGridViewDelegate_")
@protocol NautilusGridViewDelegate
- (void)gridView:(NautilusGridView * _Nonnull)gridView didSelectItemAt:(NSIndexPath * _Nonnull)indexPath;
- (void)gridView:(NautilusGridView * _Nonnull)gridView didDeselectItemAt:(NSIndexPath * _Nonnull)indexPath;
@end



/// <code>NautilusInAppBrowserViewController</code>へのオプションを追加する
SWIFT_CLASS("_TtC13NautilusUISDK26NautilusInAppBrowserOption")
@interface NautilusInAppBrowserOption : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>NautilusInAppBrowserViewController</code>へ ID やアプリの情報を提供する
SWIFT_CLASS("_TtC13NautilusUISDK28NautilusInAppBrowserSettings")
@interface NautilusInAppBrowserSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@class Configuration;

/// WebViewを表示するViewController
SWIFT_CLASS("_TtC13NautilusUISDK34NautilusInAppBrowserViewController")
@interface NautilusInAppBrowserViewController : UIViewController
/// URL から初期化する
/// \param linkURL URL
///
/// \param inAppBrowserSettings ID やアプリの情報
///
/// \param inAppBrowserOption オプションの追加
///
/// \param configuration delegateクラス
///
///
/// returns:
/// NautilusInAppBrowserViewController
+ (NautilusInAppBrowserViewController * _Nonnull)initializeWithLinkURL:(NSURL * _Nonnull)linkURL inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nullable)inAppBrowserSettings inAppBrowserOption:(NautilusInAppBrowserOption * _Nullable)inAppBrowserOption configuration:(Configuration * _Nullable)configuration SWIFT_WARN_UNUSED_RESULT;
/// リダイレクタから初期化する
/// \param redirectorKey リダイレクトキー
///
/// \param inAppBrowserSettings ID やアプリの情報
///
/// \param inAppBrowserOption オプションの追加
///
/// \param configuration delegateクラス
///
///
/// returns:
/// NautilusInAppBrowserViewController
+ (NautilusInAppBrowserViewController * _Nonnull)initializeWithRedirectorKey:(NSString * _Nonnull)redirectorKey inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nonnull)inAppBrowserSettings inAppBrowserOption:(NautilusInAppBrowserOption * _Nullable)inAppBrowserOption configuration:(Configuration * _Nullable)configuration SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// ローディングインジケータの表示
SWIFT_CLASS("_TtC13NautilusUISDK19NautilusLoadingView")
@interface NautilusLoadingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13NautilusUISDK35NautilusMessageDialogViewController")
@interface NautilusMessageDialogViewController : UIViewController
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic) UIModalTransitionStyle modalTransitionStyle;
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NautilusRadioGroupDataSource;
@protocol NautilusRadioGroupDelegate;

/// ラジオボタンビュー
SWIFT_CLASS("_TtC13NautilusUISDK18NautilusRadioGroup")
@interface NautilusRadioGroup : UIView
/// ラジオボタンの項目データ
@property (nonatomic, weak) id <NautilusRadioGroupDataSource> _Nullable dataSource;
/// ラジオボタンの選択を伝達する
@property (nonatomic, weak) id <NautilusRadioGroupDelegate> _Nullable delegate;
/// タイトルラベルの文字列
@property (nonatomic, copy) NSString * _Nullable radioGroupTitle;
/// 現在選択されている項目のIndex(get)
@property (nonatomic, readonly) NSInteger indexForSelectedItem;
/// コードから初期化する
/// \param frame CGRect
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// ラジオボタンのタイトルと数をロードします
/// datasourceを設定してください
- (void)loadItems;
/// 対象のIndexの項目を選択状態にする・その他を非選択状態にする
- (void)selectItemAt:(NSInteger)index;
@end


/// ラジオボタンの項目データ
SWIFT_PROTOCOL("_TtP13NautilusUISDK28NautilusRadioGroupDataSource_")
@protocol NautilusRadioGroupDataSource
/// 項目数
- (NSInteger)numberOfRadioItems:(NautilusRadioGroup * _Nonnull)radioGroup SWIFT_WARN_UNUSED_RESULT;
/// 指定されたIndexの項目のタイトルの文字列
- (NSString * _Nonnull)radioItemTitle:(NautilusRadioGroup * _Nonnull)radioGroup at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


/// ラジオボタンの選択を伝達する
SWIFT_PROTOCOL("_TtP13NautilusUISDK26NautilusRadioGroupDelegate_")
@protocol NautilusRadioGroupDelegate
/// 選択された項目のIndexを渡す
- (void)radioGroup:(NautilusRadioGroup * _Nonnull)radioGroup didSelect:(NSInteger)index;
@end


SWIFT_CLASS("_TtC13NautilusUISDK21NautilusStackListView")
@interface NautilusStackListView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class NautilusComponentDependency;
@class NautilusApp;
@class NSError;

/// アプリとのインターフェース
SWIFT_CLASS("_TtC13NautilusUISDK10NautilusUI")
@interface NautilusUI : NSObject <NautilusFeature>
@property (nonatomic, readonly) enum NautilusFeatureStatus featureStatus;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NautilusComponentType componentType;)
+ (NautilusComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NautilusComponentDependency *> * _Nonnull dependencies;)
+ (NSArray<NautilusComponentDependency *> * _Nonnull)dependencies SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NautilusApp * _Nonnull app;
@property (nonatomic, copy) NSString * _Nullable name;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable configFilename;)
+ (NSString * _Nullable)configFilename SWIFT_WARN_UNUSED_RESULT;
+ (void)initializeWithApplication:(NautilusApp * _Nonnull)application completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
+ (NautilusUI * _Nonnull)uiComponent SWIFT_WARN_UNUSED_RESULT;
+ (NautilusUI * _Nonnull)uiComponentAppNamed:(NSString * _Nonnull)appName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 汎用的に使用される文言とWebViewのための文言
SWIFT_CLASS("_TtC13NautilusUISDK19NautilusUIComponent")
@interface NautilusUIComponent : NSObject <NautilusColor>
/// ナビゲーションバーの背景色
@property (nonatomic, readonly, strong) UIColor * _Nonnull topBarColor;
/// ナビゲーションバーの文字・アイコン色
@property (nonatomic, readonly, strong) UIColor * _Nonnull onTopBarColor;
/// プライマリーカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryColor;
/// オンプライマリーカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull onPrimaryColor;
/// プライマリーカラー（コンテナ）
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryColorContainer;
/// オンプライマリーカラー（コンテナ）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onPrimaryColorContainer;
/// フォーカスカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull focusColor;
/// ファンデーションカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull foundationColor;
/// ファンデーションカラー（Low）
@property (nonatomic, readonly, strong) UIColor * _Nonnull foundationColorLow;
/// オンファンデーションカラー（Low）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorLow;
/// オンファンデーションカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColor;
/// オンファンデーションカラー（ModestText）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestText;
/// オンファンデーションカラー（ModestComponent）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestComponent;
/// オンファンデーションカラー（ModestSeparateThin）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestSeparateThin;
/// オンファンデーションカラー（ModestSeparateBold）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestSeparateBold;
/// オンファンデーションカラー（ModestSeparateText）
@property (nonatomic, readonly, strong) UIColor * _Nonnull onFoundationColorModestSeparateText;
/// シャドーカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull shadowColor;
/// オーバーレイカラー（Deep）
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColorDeep;
/// オーバーレイカラー（Dark）
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColorDark;
/// Disable カラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull disableColor;
/// オン Disable カラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull onDisableColor;
/// アクセントカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor;
/// リンクテキストカラー
@property (nonatomic, readonly, strong) UIColor * _Nonnull textLinkColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// URLを表示する手段として指定された方法
/// 管理画面での指定（内部・外部）に対応する値を示す
/// ただし、アプリで表示を行う場合には、この指定に従う保証はない
typedef SWIFT_ENUM(NSInteger, NautilusURLBrowseType, open) {
/// <code>WKWebView</code>で表示する
  NautilusURLBrowseTypeWebView = 0,
/// <code>SFSafariViewController</code>で表示する
  NautilusURLBrowseTypeSafariViewController = 1,
/// 外部アプリで表示する
  NautilusURLBrowseTypeExternalApp = 2,
};


/// URLを表示するためのハンドラのプロトコル
/// アプリで独自にURL遷移を制御したい場合には、このプロトコルを実装したクラスを用意する
SWIFT_PROTOCOL("_TtP13NautilusUISDK18NautilusURLHandler_")
@protocol NautilusURLHandler
/// 指定されたURLを表示する
/// \param url 表示対象のURL
///
/// \param browseType MA 2.0でのURL表示方法の指定
///
/// \param viewController URLを表示しようとしているViewController
///
- (void)openWithUrl:(NSURL * _Nonnull)url browseType:(enum NautilusURLBrowseType)browseType in:(UIViewController * _Nonnull)viewController;
@end


/// MA 2.0 SDKでURLを表示する時に、URLにパラメーターを付与するなどの前処理を行うプロトコル
/// URLの表示はSDKで行うが、何らかのパラメーターをURLに追加する場合にアプリで実装を行う
SWIFT_PROTOCOL("_TtP13NautilusUISDK23NautilusURLPreprocessor_")
@protocol NautilusURLPreprocessor
/// 表示するURLに対し、パラメーターなどを追加する
/// \param baseURL 表示対象となるURL
///
/// \param browseType MA 2.0でのURL表示方法の指定
///
///
/// returns:
/// <code>baseURL</code>にクエリーパラメーターなどを付与したURL
- (NSURL * _Nonnull)buildURLFrom:(NSURL * _Nonnull)baseURL browseType:(enum NautilusURLBrowseType)browseType SWIFT_WARN_UNUSED_RESULT;
@end


/// MA 2.0で、URLを表示するためのクラス
/// このクラスのクラスメソッドを利用して、URLの表示を行います
SWIFT_CLASS("_TtC13NautilusUISDK17NautilusWebHelper")
@interface NautilusWebHelper : NSObject
/// <code>WKWebView</code>に登録するメッセージハンドラーを追加する
+ (void)addMessageHandler:(NautilusWebViewWebScriptMessageHandler * _Nonnull)messageHandler;
/// 登録済みのメッセージハンドラーを削除する
+ (void)removeMessageHandler:(NautilusWebViewWebScriptMessageHandler * _Nonnull)messageHandler;
/// URLの表示を行う
/// important:
/// <code>handler</code> に値が設定されている場合には、処理を行わず、<code>handler</code>側でURLの表示を行います
/// PID/CIDを送信する際はinAppBrowserSettingsパラメータを使用してください
/// \param url 表示対象のURL
///
/// \param browseType MA 2.0でのURL表示方法の指定
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithUrl:(NSURL * _Nonnull)url browseType:(enum NautilusURLBrowseType)browseType inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nullable)inAppBrowserSettings in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// important:
/// <code>handler</code> に値が設定されている場合には、処理を行わず、<code>handler</code>側でURLの表示を行います
/// PID/CIDを送信する際はinAppBrowserSettingsパラメータを使用してください
/// \param url 表示対象のURL
///
/// \param browseType MA 2.0でのURL表示方法の指定
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param inAppBrowserOption 内部ブラウザのオプション
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithUrl:(NSURL * _Nonnull)url browseType:(enum NautilusURLBrowseType)browseType inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nullable)inAppBrowserSettings inAppBrowserOption:(NautilusInAppBrowserOption * _Nonnull)inAppBrowserOption in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// important:
/// <code>handler</code> に値が設定されている場合には、処理を行わず、<code>handler</code>側でURLの表示を行います
/// PID/CIDを送信する際はinAppBrowserSettingsパラメータを使用してください
/// \param url 表示対象のURL
///
/// \param browseType MA 2.0でのURL表示方法の指定
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param configuration URLを表示する際の各種設定
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithUrl:(NSURL * _Nonnull)url browseType:(enum NautilusURLBrowseType)browseType inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nullable)inAppBrowserSettings configuration:(Configuration * _Nonnull)configuration in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// important:
/// <code>handler</code> に値が設定されている場合には、処理を行わず、<code>handler</code>側でURLの表示を行います
/// PID/CIDを送信する際はinAppBrowserSettingsパラメータを使用してください
/// \param url 表示対象のURL
///
/// \param browseType MA 2.0でのURL表示方法の指定
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param inAppBrowserOption 内部ブラウザのオプション
///
/// \param configuration URLを表示する際の各種設定
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithUrl:(NSURL * _Nonnull)url browseType:(enum NautilusURLBrowseType)browseType inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nullable)inAppBrowserSettings inAppBrowserOption:(NautilusInAppBrowserOption * _Nonnull)inAppBrowserOption configuration:(Configuration * _Nonnull)configuration in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// \param redirectKey 管理画面で設定したリダイレクタキー
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithRedirectKey:(NSString * _Nonnull)redirectKey inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nonnull)inAppBrowserSettings in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// \param redirectKey 管理画面で設定したリダイレクタキー
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param inAppBrowserOption 内部ブラウザのオプション
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithRedirectKey:(NSString * _Nonnull)redirectKey inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nonnull)inAppBrowserSettings inAppBrowserOption:(NautilusInAppBrowserOption * _Nonnull)inAppBrowserOption in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// \param redirectKey 管理画面で設定したリダイレクタキー
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param configuration URLを表示する際の各種設定
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithRedirectKey:(NSString * _Nonnull)redirectKey inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nonnull)inAppBrowserSettings configuration:(Configuration * _Nonnull)configuration in:(UIViewController * _Nonnull)viewController;
/// URLの表示を行う
/// \param redirectKey 管理画面で設定したリダイレクタキー
///
/// \param inAppBrowserSettings アプリ・ID情報
///
/// \param inAppBrowserOption 内部ブラウザのオプション
///
/// \param configuration URLを表示する際の各種設定
///
/// \param viewController 表示しようとしている<code>ViewController</code>
///
+ (void)openWithRedirectKey:(NSString * _Nonnull)redirectKey inAppBrowserSettings:(NautilusInAppBrowserSettings * _Nonnull)inAppBrowserSettings inAppBrowserOption:(NautilusInAppBrowserOption * _Nonnull)inAppBrowserOption configuration:(Configuration * _Nonnull)configuration in:(UIViewController * _Nonnull)viewController;
/// Webを開く処理を任せるためのラッパーとして利用したいのでインスタンスの初期化をできないようにする
/// このクラスのクラスメソッドのみを利用して、URLを表示させたい
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// URL表示を行う際の画面の制御の指定
SWIFT_CLASS("_TtCC13NautilusUISDK17NautilusWebHelper13Configuration")
@interface Configuration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKNavigation;
@class WKNavigationResponse;
@class WKNavigationAction;

/// <code>WKNavigationDelegate</code>の挙動をカスタムしたい場合はこのクラスを継承する
SWIFT_CLASS("_TtC13NautilusUISDK33NautilusWebViewNavigationDelegate")
@interface NautilusWebViewNavigationDelegate : NSObject <WKNavigationDelegate>
/// コンテンツのロードが完了した時に呼ばれる
/// \param webView デリゲートメソッドを呼び出したWebView
///
/// \param navigation 操作のためのナビゲーションオブジェクト
///
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
/// 読み込み途中のエラーに対応する
/// \param webView デリゲートメソッドを呼び出したWebView
///
/// \param navigation 操作のためのナビゲーションオブジェクト
///
/// \param error 発生したエラー
///
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// 読み込み開始時のエラーに対応する(圏外など)
/// \param webView デリゲートメソッドを呼び出したWebView
///
/// \param navigation 操作のためのナビゲーションオブジェクト
///
/// \param error 発生したエラー
///
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// レスポンスのエラーに対応する（403など）
/// \param webView デリゲートメソッドを呼び出したWebView
///
/// \param navigationResponse ナビゲーションレスポンスに関する情報
///
/// \param decisionHandler 操作を許可するかキャンセルするかに関する結果を呼び出すための完了ハンドラ
///
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
/// リダイレクトを受信したときに呼び出される
/// \param webView デリゲートメソッドを呼び出したWebView
///
/// \param navigation ナビゲーション
///
- (void)webView:(WKWebView * _Nonnull)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
/// 指定されたアクション情報に基づいて新しいコンテンツに移動する許可をデリゲートに要求します
/// \param webView 操作要求が開始されたWebView
///
/// \param navigationAction 操作リクエストをトリガーしたアクションの詳細
///
/// \param decisionHandler 操作を許可するかキャンセルするかに関する結果を呼び出すための完了ハンドラ
///
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKFrameInfo;
@class WKWebViewConfiguration;
@class WKWindowFeatures;

/// <code>WKUIDelegate</code>の挙動をカスタムしたい場合はこのクラスを継承する
SWIFT_CLASS("_TtC13NautilusUISDK25NautilusWebViewUIDelegate")
@interface NautilusWebViewUIDelegate : NSObject <WKUIDelegate>
/// JavaScriptアラートパネルを表示します
/// \param webView デリゲートメソッドを呼び出すWebView
///
/// \param message 表示されるメッセージ
///
/// \param frame JavaScriptプロセスがこの呼び出しを開始したフレーム
///
/// \param completionHandler アラートが閉じられた後に呼び出す完了ハンドラ
///
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptAlertPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// JavaScript確認パネルを表示します
/// \param webView デリゲートメソッドを呼び出すWebView
///
/// \param message 表示されるメッセージ
///
/// \param frame JavaScriptプロセスがこの呼び出しを開始したフレーム
///
/// \param completionHandler アラートが閉じられた後に呼び出す完了ハンドラ
///
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptConfirmPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// JavaScriptテキスト入力パネルを表示します
/// \param webView デリゲートメソッドを呼び出すWebView
///
/// \param prompt 表示されるメッセージ
///
/// \param defaultText テキスト入力フィールドに表示される最初のテキスト
///
/// \param frame JavaScriptプロセスがこの呼び出しを開始したフレーム
///
/// \param completionHandler テキスト入力パネルが閉じられた後に呼び出す完了ハンドラ。ユーザーがOKを選択した場合は、入力したテキストを渡します。Cancelの場合は、nilを渡します
///
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptTextInputPanelWithPrompt:(NSString * _Nonnull)prompt defaultText:(NSString * _Nullable)defaultText initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
/// 新しいウェブビューを作成する
/// <ul>
///   <li>
///     Description: MAのデフォルトでは新しいタブは既存のビューで開きます
///   </li>
/// </ul>
/// \param webView デリゲートメソッドを呼び出すWebView
///
/// \param configuration 新しいウェブビューを作成するときに使用する設定
///
/// \param navigationAction 新しいウェブビューが作成される原因となるアクション
///
/// \param windowFeatures ウェブページから要求されたウィンドウ機能
///
///
/// returns:
/// 新しいウェブビューまたはnil
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol NautilusYearMonthDatePickerGroupDelegate;
@class UIPickerView;

/// 「年」「月」選択の<code>DatePickerView</code>
SWIFT_CLASS("_TtC13NautilusUISDK32NautilusYearMonthDatePickerGroup")
@interface NautilusYearMonthDatePickerGroup : UIView <UIPickerViewDataSource, UIPickerViewDelegate>
/// ピッカーで日付を選択した時に呼ばれるデリゲート
@property (nonatomic, weak) id <NautilusYearMonthDatePickerGroupDelegate> _Nullable delegate;
/// タイトルラベルの文字列
@property (nonatomic, copy) NSString * _Nullable datePickerTitle;
/// 内部的に保持している<code>UITextField</code>の<code>placeholder</code>にアクセスする
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// 内部的に保持している<code>dateFormatter</code>のロケールにアクセスする（デフォルトは日本）
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// 内部的に保持している<code>dateFormatter</code>のタイムゾーンにアクセスする（デフォルトは東京）
@property (nonatomic, copy) NSTimeZone * _Nonnull timeZone;
/// 内部的に保持している<code>dateFormatter</code>のカレンダーにアクセスする（デフォルトはグレゴリオ暦）
@property (nonatomic, copy) NSCalendar * _Nonnull calendar;
/// 現在設定されている日付
/// 「日」以降の値は無視されます
/// important:
/// date、dateFormatのいずれかが未指定の場合は、<code>TextField</code>に何も表示されません
@property (nonatomic, copy) NSDate * _Nullable date;
/// 現在選択されている「年」「月」を表示するためのフォーマット文字列
/// yyyy/MMなど
/// important:
/// date、dateFormatのいずれかが未指定の場合は、<code>TextField</code>に何も表示されません
@property (nonatomic, copy) NSString * _Nullable dateFormat;
/// 選択可能な最小日付
@property (nonatomic, copy) NSDate * _Nullable minimumDate;
/// 選択可能な最大日付
@property (nonatomic, copy) NSDate * _Nullable maximumDate;
/// 選択ピッカー上の「年」を表示するためのフォーマット文字列
@property (nonatomic, copy) NSString * _Nullable pickerYearFormat;
/// 選択ピッカー上の「月」を表示するためのフォーマット文字列
@property (nonatomic, copy) NSString * _Nullable pickerMonthFormat;
/// 「年」「月」選択の<code>DatePickerView</code>を初期化します
/// \param frame CGRect
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


/// ピッカーで日付を選択した時に呼ばれるデリゲート
SWIFT_PROTOCOL("_TtP13NautilusUISDK40NautilusYearMonthDatePickerGroupDelegate_")
@protocol NautilusYearMonthDatePickerGroupDelegate
/// 更新後の日付が渡されます
/// didChanged date: 日付。ただし、日以降は省略されます。
/// 例：2022/04/01 00:00:00
- (void)yearMonthDatePickerGroup:(NautilusYearMonthDatePickerGroup * _Nonnull)pickerGroup didChanged:(NSDate * _Nonnull)date;
/// ピッカーがクリアされた時に呼ばれます
- (void)yearMonthDatePickerGroupDidClear:(NautilusYearMonthDatePickerGroup * _Nonnull)pickerGroup;
@end

typedef SWIFT_ENUM(NSInteger, NoneCategory, open) {
  NoneCategoryRemoveMargin = 0,
  NoneCategoryAddAllTab = 1,
};

typedef SWIFT_ENUM(NSInteger, TransitionStyle, open) {
  TransitionStyleDialog = 0,
  TransitionStyleFullscreen = 1,
  TransitionStyleNotHaveDetail = 2,
};






#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
