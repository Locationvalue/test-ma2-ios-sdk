// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NautilusCodeReaderSDK
import AVFoundation
import Foundation
import NautilusCoreSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum NautilusCodeReaderError : Swift.Int, Swift.Error {
  case cameraDeviceError
  case metadataError
  case codeTextError
  case codeFormatError
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusCodeReader : ObjectiveC.NSObject {
  @objc public static func instantiateCodeReaderViewController(_ app: NautilusCoreSDK.NautilusApp, setting: NautilusCodeReaderSDK.NautilusCodeReaderSetting, handler: any NautilusCodeReaderSDK.NautilusCodeReaderHandler) -> UIKit.UIViewController
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NautilusCodeReaderViewController : UIKit.UIViewController, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc final public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NautilusCodeReaderSDK.NautilusCodeReaderViewController : NautilusCodeReaderSDK.NautilusCodeReaderInstantiatable {
  @_Concurrency.MainActor(unsafe) @objc public static func instantiate(app: NautilusCoreSDK.NautilusApp, setting: NautilusCodeReaderSDK.NautilusCodeReaderSetting, handler: any NautilusCodeReaderSDK.NautilusCodeReaderHandler) -> UIKit.UIViewController
}
@objc public protocol NautilusCodeReaderInstantiatable {
  @objc static func instantiate(app: NautilusCoreSDK.NautilusApp, setting: NautilusCodeReaderSDK.NautilusCodeReaderSetting, handler: any NautilusCodeReaderSDK.NautilusCodeReaderHandler) -> UIKit.UIViewController
}
@objc public protocol NautilusCodeReaderHandler {
  @objc func codeReaderHandle(_ viewController: UIKit.UIViewController, codeText: Swift.String) -> Swift.Bool
  @objc func handleCodeDetectionError(_ viewController: UIKit.UIViewController, error: NautilusCodeReaderSDK.NautilusCodeReaderError) -> Swift.Bool
}
@objc final public class NautilusCodeReaderSetting : ObjectiveC.NSObject {
  final public let title: Swift.String
  final public let usageText: Swift.String
  final public let codeFormat: NautilusCodeReaderSDK.NautilusCodeFormat
  public init(title: Swift.String, usageText: Swift.String, codeFormat: NautilusCodeReaderSDK.NautilusCodeFormat)
  @objc deinit
}
@objc public enum NautilusCodeFormat : Swift.Int {
  case qrCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NautilusCodeReaderSDK.NautilusCodeReaderError : Swift.Equatable {}
extension NautilusCodeReaderSDK.NautilusCodeReaderError : Swift.Hashable {}
extension NautilusCodeReaderSDK.NautilusCodeReaderError : Swift.RawRepresentable {}
extension NautilusCodeReaderSDK.NautilusCodeFormat : Swift.Equatable {}
extension NautilusCodeReaderSDK.NautilusCodeFormat : Swift.Hashable {}
extension NautilusCodeReaderSDK.NautilusCodeFormat : Swift.RawRepresentable {}
