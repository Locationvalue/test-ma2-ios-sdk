#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef NAUTILUSSTAMPSDK_SWIFT_H
#define NAUTILUSSTAMPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import NautilusContainerSDK;
@import NautilusCoreSDK;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NautilusStampSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// チェックイン結果の情報
SWIFT_CLASS("_TtC16NautilusStampSDK25NautilusCheckInResultInfo")
@interface NautilusCheckInResultInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// スタンプラリーに設定されているチェックポイント
SWIFT_CLASS("_TtC16NautilusStampSDK18NautilusCheckPoint")
@interface NautilusCheckPoint : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// チェックポイントに設定されている画像情報
SWIFT_CLASS("_TtC16NautilusStampSDK23NautilusCheckPointImage")
@interface NautilusCheckPointImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// チェックポイントに設定されている画像の種別
typedef SWIFT_ENUM(NSInteger, NautilusCheckPointImageType, open) {
/// スタンプ押下前の画像
  NautilusCheckPointImageTypeBeforeCheckIn = 0,
/// スタンプ押下後の画像
  NautilusCheckPointImageTypeAfterCheckIn = 1,
};

@class NautilusExchangePrizeRequestTargetPrize;

/// 景品交換を行うためのリクエストの情報
SWIFT_CLASS("_TtC16NautilusStampSDK32NautilusExchangePrizeRequestInfo")
@interface NautilusExchangePrizeRequestInfo : NSObject
/// 景品交換を行うためのリクエストの情報
/// \param targetPrizes 景品交換の対象となる景品のID情報の配列
///
- (nonnull instancetype)initWithTargetPrizes:(NSArray<NautilusExchangePrizeRequestTargetPrize *> * _Nonnull)targetPrizes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NautilusStampPrizeType : NSInteger;

/// 景品交換の対象となる景品の情報
SWIFT_CLASS("_TtC16NautilusStampSDK39NautilusExchangePrizeRequestTargetPrize")
@interface NautilusExchangePrizeRequestTargetPrize : NSObject
/// スタンプの景品情報：景品交換リクエスト用
/// \param prizeID 発行対象景品ID（クーポンID or ポイントID）
///
/// \param prizeType <code>NautilusStampPrizeType</code>で定義された発行対象景品種別
///
- (nonnull instancetype)initWithPrizeID:(NSInteger)prizeID prizeType:(enum NautilusStampPrizeType)prizeType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NautilusComponentDependency;
@class NSString;
@class NautilusApp;
@class NSError;
@class NautilusStampCardInfo;
@class NSDate;
@class NautilusStampCheckInDeviceInfo;
@class NautilusStampRallyInfo;
@class NautilusStampPrizeExchangeResult;

/// アプリとのインターフェース
SWIFT_CLASS("_TtC16NautilusStampSDK13NautilusStamp")
@interface NautilusStamp : NSObject <NautilusFeature>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NautilusComponentType componentType;)
+ (NautilusComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NautilusComponentDependency *> * _Nonnull dependencies;)
+ (NSArray<NautilusComponentDependency *> * _Nonnull)dependencies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable configFilename;)
+ (NSString * _Nullable)configFilename SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NautilusApp * _Nonnull app;
@property (nonatomic, copy) NSString * _Nullable name;
/// <code>NautilusAnalyticsSDK</code>の機能の利用可否ステータス
@property (nonatomic, readonly) enum NautilusFeatureStatus featureStatus;
+ (void)initializeWithApplication:(NautilusApp * _Nonnull)application completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
+ (NautilusStamp * _Nonnull)stamp SWIFT_WARN_UNUSED_RESULT;
+ (NautilusStamp * _Nonnull)stampAppNamed:(NSString * _Nonnull)appName SWIFT_WARN_UNUSED_RESULT;
/// スタンプカード一覧を取得する
/// Objective-Cから呼び出す場合は, こちらのメソッドを利用してください
/// \param stampCardIDs 取得するスタンプカードのIDの配列
///
/// \param completion 成功時はスタンプカード一覧, 失敗時は<code>NSError</code>をコールバックする
///
- (void)getStampCardListWithStampCardIDs:(NSArray<NSNumber *> * _Nullable)stampCardIDs completion:(void (^ _Nonnull)(NSArray<NautilusStampCardInfo *> * _Nullable, NSError * _Nullable))completion;
/// スタンプカードの件数を取得する
/// Objective-Cから呼び出す場合は, こちらのメソッドを利用してください
/// \param checkDateTime 取得基準時刻. 基準時刻後に配信されたものを取得する
///
/// \param completion 成功時はスタンプカードの件数, 失敗時は<code>NSError</code>をコールバックする
///
- (void)getStampCardCountWithCheckDateTime:(NSDate * _Nullable)checkDateTime completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion;
/// 指定の機器でチェックイン可能な全てのスタンプカード、スタンプラリーにチェックインを行う
/// <code>Objective-C</code>から呼び出す場合は, こちらのメソッドを利用してください
/// \param checkInDevice チェックイン処理に必要な端末の情報
///
/// \param completion 成功時はチェックインすることで付与された情報, 失敗時は<code>NSError</code>をコールバックする
///
- (void)checkInCheckInDevice:(NautilusStampCheckInDeviceInfo * _Nonnull)checkInDevice completion:(void (^ _Nonnull)(NSArray<NautilusCheckInResultInfo *> * _Nullable, NSError * _Nullable))completion;
/// 特定のスタンプカードのチェックイン処理を実行する
/// <code>Objective-C</code>から呼び出す場合は, こちらのメソッドを利用してください
/// \param stampCard チェックイン対象のスタンプカード
///
/// \param checkInDevice チェックイン処理に必要な端末の情報
///
/// \param completion 成功時はチェックインすることで付与された情報, 失敗時は<code>NSError</code>をコールバックする
///
- (void)checkInStampCard:(NautilusStampCardInfo * _Nonnull)stampCard checkInDevice:(NautilusStampCheckInDeviceInfo * _Nonnull)checkInDevice completion:(void (^ _Nonnull)(NSArray<NautilusCheckInResultInfo *> * _Nullable, NSError * _Nullable))completion;
/// 特定のスタンプラリーのチェックイン処理を実行する
/// <code>Objective-C</code>から呼び出す場合は, こちらのメソッドを利用してください
/// \param stampRally チェックイン対象のスタンプラリー
///
/// \param checkInDevice チェックイン処理に必要な端末の情報
///
/// \param completion 成功時はチェックインすることで付与された情報, 失敗時は<code>NSError</code>をコールバックする
///
- (void)checkInStampRally:(NautilusStampRallyInfo * _Nonnull)stampRally checkInDevice:(NautilusStampCheckInDeviceInfo * _Nonnull)checkInDevice completion:(void (^ _Nonnull)(NSArray<NautilusCheckInResultInfo *> * _Nullable, NSError * _Nullable))completion;
/// スタンプカードに設定されている景品の交換を行う
/// <code>Objective-C</code>から呼び出す場合は, こちらのメソッドを利用してください
/// \param stampCard スタンプカード情報
///
/// \param prizes 景品交換を行うためのリクエストの情報
///
/// \param completion 成功時は交換された景品の情報, 失敗時は<code>NSError</code>をコールバックする
///
- (void)exchangePrizeWithStampCard:(NautilusStampCardInfo * _Nonnull)stampCard prizes:(NautilusExchangePrizeRequestInfo * _Nonnull)prizes completion:(void (^ _Nonnull)(NSArray<NautilusStampPrizeExchangeResult *> * _Nullable, NSError * _Nullable))completion;
/// スタンプラリー一覧を取得する
/// Objective-Cから呼び出す場合は, こちらのメソッドを利用してください
/// \param stampRallyIDs 取得するスタンプラリーのIDの指定
///
/// \param completion スタンプラリー一覧, またはエラーをコールバックする
///
- (void)getStampRallyListWithStampRallyIDs:(NSArray<NSNumber *> * _Nullable)stampRallyIDs completion:(void (^ _Nonnull)(NSArray<NautilusStampRallyInfo *> * _Nullable, NSError * _Nullable))completion;
/// スタンプラリーの件数を取得する
/// Objective-Cから呼び出す場合は, こちらのメソッドを利用してください
/// \param checkDateTime 最終確認時刻
///
/// \param completion スタンプラリーの件数, またはエラーをコールバックする
///
- (void)getStampRallyCountWithCheckDateTime:(NSDate * _Nullable)checkDateTime completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion;
/// スタンプラリーに設定されている景品の交換を行う
/// <code>Objective-C</code>から呼び出す場合は, こちらのメソッドを利用してください
/// \param stampCard スタンプラリー情報
///
/// \param prizes 景品交換を行うためのリクエストの情報
///
/// \param completion 成功時は交換された景品の情報, 失敗時は<code>NSError</code>をコールバックする
///
- (void)exchangePrizeWithStampRally:(NautilusStampRallyInfo * _Nonnull)stampRally prizes:(NautilusExchangePrizeRequestInfo * _Nonnull)prizes completion:(void (^ _Nonnull)(NSArray<NautilusStampPrizeExchangeResult *> * _Nullable, NSError * _Nullable))completion;
/// MA 1.0 のスタンプデータを MA 2.0 へ移行する
/// Objective-Cから呼び出す場合は, こちらのメソッドを利用してください
/// \param installId MA1.0のインストールID
///
/// \param manageCode 顧客管理コード
///
/// \param completion 成功時は引数無し, 失敗時は<code>NSError</code>をコールバックする
///
- (void)migrateStampCardWithInstallId:(NSString * _Nonnull)installId manageCode:(NSString * _Nullable)manageCode completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// スタンプの有効期間の期間の種別
typedef SWIFT_ENUM(NSInteger, NautilusStampAvailablePeriodType, open) {
/// 「日」で指定
  NautilusStampAvailablePeriodTypeDay = 0,
/// 「月」で指定
  NautilusStampAvailablePeriodTypeMonth = 1,
/// 「年」で指定
  NautilusStampAvailablePeriodTypeYear = 2,
};

/// スタンプの有効期間の種別
typedef SWIFT_ENUM(NSInteger, NautilusStampAvailableType, open) {
/// 初回押印の日時から有効期限を決める
  NautilusStampAvailableTypeInitialCheckIn = 0,
/// 最終押印の日時から有効期限を決める
  NautilusStampAvailableTypeLastCheckIn = 1,
};


/// サーバから取得されるスタンプカード情報
SWIFT_CLASS("_TtC16NautilusStampSDK21NautilusStampCardInfo")
@interface NautilusStampCardInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// チェックインに利用する端末の情報
SWIFT_CLASS("_TtC16NautilusStampSDK30NautilusStampCheckInDeviceInfo")
@interface NautilusStampCheckInDeviceInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// チェックイン機器の種類
typedef SWIFT_ENUM(NSInteger, NautilusStampCheckInDeviceType, open) {
/// QRコード
  NautilusStampCheckInDeviceTypeQrCode = 0,
/// ビーコン
  NautilusStampCheckInDeviceTypeBeacon = 1,
};

/// <code>NautilusStamp</code>のエラー定義
typedef SWIFT_ENUM(NSInteger, NautilusStampError, open) {
/// 不明
  NautilusStampErrorUnknown = 0,
/// 接続エラー
  NautilusStampErrorConnection = 1,
/// タイムアウト
  NautilusStampErrorTimedout = 2,
/// API処理エラー
  NautilusStampErrorApiProcessError = 3,
/// HTTP/HTTPS通信エラー
  NautilusStampErrorHttpConnection = 4,
/// レスポンスのパースエラー
  NautilusStampErrorParseFailure = 5,
/// 明示的にユーザーによりキャンセルされた
  NautilusStampErrorUserCancelled = 6,
/// 不正なパラメータ
  NautilusStampErrorInvalidParamater = 7,
/// 不正なSDKインスタンス
  NautilusStampErrorInvalidInstance = 8,
/// パラメータ不正
  NautilusStampErrorInvalidParameters = 100,
/// パラメータが不足している
  NautilusStampErrorMissingRequiredParameter = 101,
/// パラメータフォーマット不正
  NautilusStampErrorUnexpectedParameterFormat = 102,
/// サーバ側エラー
  NautilusStampErrorServerError = 200,
/// メンテナンス中
  NautilusStampErrorServiceMaintenance = 901,
/// 指定したAPIが存在しない
  NautilusStampErrorUnknownAPIService = 903,
/// PIDが未登録
  NautilusStampErrorInvalidUserPID = 905,
/// API KEYが不正
  NautilusStampErrorDeveloperError = 906,
/// 未ログインのため利用不可
  NautilusStampErrorRequiresLoginStatus = 907,
};
static NSString * _Nonnull const NautilusStampErrorDomain = @"NautilusStampSDK.NautilusStampError";


/// スタンプカード、スタンプラリーに設定されている画像
SWIFT_CLASS("_TtC16NautilusStampSDK18NautilusStampImage")
@interface NautilusStampImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// スタンプカード、スタンプラリーに設定されている画像の種別
typedef SWIFT_ENUM(NSInteger, NautilusStampImageType, open) {
/// スタンプ押下前の画像
  NautilusStampImageTypeBeforeCheckIn = 0,
/// スタンプ押下後の画像
  NautilusStampImageTypeAfterCheckIn = 1,
};


/// 景品交換によって発行されたクーポンの情報
SWIFT_CLASS("_TtC16NautilusStampSDK36NautilusStampPrizeExchangeCouponInfo")
@interface NautilusStampPrizeExchangeCouponInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 景品交換によって発行されたポイントの情報
SWIFT_CLASS("_TtC16NautilusStampSDK35NautilusStampPrizeExchangePointInfo")
@interface NautilusStampPrizeExchangePointInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 景品交換の結果
SWIFT_CLASS("_TtC16NautilusStampSDK32NautilusStampPrizeExchangeResult")
@interface NautilusStampPrizeExchangeResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// スタンプの景品の交換方法
typedef SWIFT_ENUM(NSInteger, NautilusStampPrizeExchangeType, open) {
/// 交換は自動で行う
  NautilusStampPrizeExchangeTypeAutomatic = 0,
/// 交換は手動で行う
  NautilusStampPrizeExchangeTypeManual = 1,
};


/// スタンプ景品に設定されている画像情報
SWIFT_CLASS("_TtC16NautilusStampSDK23NautilusStampPrizeImage")
@interface NautilusStampPrizeImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// スタンプ景品の情報
SWIFT_CLASS("_TtC16NautilusStampSDK22NautilusStampPrizeInfo")
@interface NautilusStampPrizeInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// スタンプの景品種別
typedef SWIFT_ENUM(NSInteger, NautilusStampPrizeType, open) {
/// クーポン
  NautilusStampPrizeTypeCoupon = 0,
/// ポイント
  NautilusStampPrizeTypePoint = 1,
};

/// スタンプ景品の利用期限の種別
typedef SWIFT_ENUM(NSInteger, NautilusStampPrizeUseLimitType, open) {
/// 日
  NautilusStampPrizeUseLimitTypeDay = 0,
/// 月
  NautilusStampPrizeUseLimitTypeMonth = 1,
/// 日付指定
  NautilusStampPrizeUseLimitTypeSpecificDate = 2,
};


/// サーバから取得されるスタンプラリー情報
SWIFT_CLASS("_TtC16NautilusStampSDK22NautilusStampRallyInfo")
@interface NautilusStampRallyInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
