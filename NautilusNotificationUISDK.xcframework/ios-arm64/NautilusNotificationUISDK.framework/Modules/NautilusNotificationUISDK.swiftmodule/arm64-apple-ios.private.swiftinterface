// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NautilusNotificationUISDK
import DeveloperToolsSupport
import Foundation
import NautilusAnalyticsSDK
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusImagingSDK
import NautilusLoggingSDK
import NautilusNotificationSDK
import NautilusUISDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol NautilusNotificationListViewControllerDelegate {
  @objc func notificationList(_ viewController: NautilusNotificationUISDK.NautilusNotificationListViewController, didSelect remoteMessage: NautilusNotificationSDK.NautilusRemoteMessage) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NautilusNotificationListViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any NautilusNotificationUISDK.NautilusNotificationListViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) final public func prepare(with app: NautilusCoreSDK.NautilusApp)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class NautilusNotificationUI : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  @objc final public var featureStatus: NautilusCoreSDK.NautilusFeatureStatus {
    @objc get
  }
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp, completion: @escaping NautilusCoreSDK.NautilusFeatureInitializationCompletion)
  @objc public static func notificationUI() -> NautilusNotificationUISDK.NautilusNotificationUI
  @objc(notificationUIAppNamed:) public static func notificationUI(appName: Swift.String) -> NautilusNotificationUISDK.NautilusNotificationUI
  @objc final public func presentNotificationListViewController(in viewController: UIKit.UIViewController, delegate: (any NautilusNotificationUISDK.NautilusNotificationListViewControllerDelegate)?)
  @objc final public func instantiateNotificationListViewController() -> NautilusNotificationUISDK.NautilusNotificationListViewController
  @objc deinit
}
