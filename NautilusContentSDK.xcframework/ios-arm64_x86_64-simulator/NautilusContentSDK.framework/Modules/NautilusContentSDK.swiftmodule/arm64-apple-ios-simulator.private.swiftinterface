// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NautilusContentSDK
import DeveloperToolsSupport
import Foundation
import NautilusAnalyticsSDK
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusImagingSDK
import NautilusLoggingSDK
import NautilusUISDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusContentInfo : ObjectiveC.NSObject {
  final public let contentID: Swift.Int
  final public let contentTitle: Swift.String?
  final public let contentText: Swift.String
  final public let publishStartDate: Foundation.Date
  final public let publishEndDate: Foundation.Date?
  final public let eventStartDate: Foundation.Date?
  final public let eventEndDate: Foundation.Date?
  final public let barcode: Swift.String?
  final public let barcodeImageURL: Foundation.URL?
  final public let categoryIDs: [Swift.Int]?
  final public let sortNo: Swift.Int?
  final public let searchWord: Swift.String?
  final public let contentImages: [NautilusContentSDK.NautilusContentImage]?
  final public var contentType: NautilusContentSDK.NautilusContentType? {
    get
  }
  final public let favorite: Swift.Bool?
  final public let alias: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusContentImage : ObjectiveC.NSObject, Swift.Codable {
  final public let imageURL: Foundation.URL?
  final public let aspectRatio: Swift.Double?
  final public let sortNo: Swift.Int?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol NautilusContentDelegate {
  @objc func content(_ content: NautilusContentSDK.NautilusContent, canHandle contentInfo: NautilusContentSDK.NautilusContentInfo, in viewController: UIKit.UIViewController) -> Swift.Bool
  @objc func content(_ content: NautilusContentSDK.NautilusContent, actionButtonTitleForContent contentInfo: NautilusContentSDK.NautilusContentInfo, in viewController: UIKit.UIViewController) -> Swift.String
  @objc func content(_ content: NautilusContentSDK.NautilusContent, handle contentInfo: NautilusContentSDK.NautilusContentInfo, in viewController: UIKit.UIViewController) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc final public class NautilusContent : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  @objc final public var featureStatus: NautilusCoreSDK.NautilusFeatureStatus {
    @objc get
  }
  @objc weak final public var delegate: (any NautilusContentSDK.NautilusContentDelegate)?
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp, completion: @escaping NautilusCoreSDK.NautilusFeatureInitializationCompletion)
  @objc public static func content() -> NautilusContentSDK.NautilusContent
  @objc(shopAppNamed:) public static func content(appName: Swift.String) -> NautilusContentSDK.NautilusContent
  @objc final public func instantiateContentListViewController() -> UIKit.UIViewController
  @objc final public func instantiateContentListViewController(category: NautilusContentSDK.NautilusContentCategoryInfo?, useCategoryTab: Swift.Bool) -> UIKit.UIViewController
  final public func instantiateContentListViewController(categoryID: Swift.Int?, useCategoryTab: Swift.Bool) -> UIKit.UIViewController
  @objc final public func instantiateContentListViewController(categoryID: Swift.Int, useCategoryTab: Swift.Bool) -> UIKit.UIViewController
  @objc final public func instantiateContentListViewController(categoryAlias: Swift.String?, useCategoryTab: Swift.Bool) -> UIKit.UIViewController
  @objc final public func instantiateFavoriteContentListViewController() -> UIKit.UIViewController
  @objc final public func instantiateContentDetailViewController(contentID: Swift.Int, contentType: NautilusContentSDK.NautilusContentType) -> UIKit.UIViewController
  @available(*, deprecated, renamed: "getCommonContentList(offset:limit:useCache:contentIDs:categoryIDs:searchWord:sortKeys:checkDateTime:completion:)")
  final public func getCommonContentList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  final public func getCommonContentList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, searchWord: Swift.String?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @available(*, deprecated, renamed: "getCommonContentList(offset:limit:useCache:contentIDs:categoryIDs:searchWord:sortKeys:checkDateTime:completion:)")
  @objc final public func getCommonContentList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  @objc final public func getCommonContentList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, searchWord: Swift.String?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getCommonContentCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @objc final public func getCommonContentCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  @available(*, deprecated, renamed: "getPrivateContentList(offset:limit:useCache:contentIDs:categoryIDs:searchWord:sortKeys:checkDateTime:completion:)")
  final public func getPrivateContentList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  final public func getPrivateContentList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, searchWord: Swift.String?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @available(*, deprecated, renamed: "getPrivateContentList(offset:limit:useCache:contentIDs:categoryIDs:searchWord:sortKeys:checkDateTime:completion:)")
  @objc final public func getPrivateContentList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  @objc final public func getPrivateContentList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, searchWord: Swift.String?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getPrivateContentCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @objc final public func getPrivateContentCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  @available(*, deprecated, renamed: "getFavoriteShopContentList(offset:limit:useCache:contentIDs:categoryIDs:searchWord:sortKeys:checkDateTime:completion:)")
  final public func getFavoriteShopContentList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  final public func getFavoriteShopContentList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, searchWord: Swift.String?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @available(*, deprecated, renamed: "getFavoriteShopContentList(offset:limit:useCache:contentIDs:categoryIDs:searchWord:sortKeys:checkDateTime:completion:)")
  @objc final public func getFavoriteShopContentList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  @objc final public func getFavoriteShopContentList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, contentIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, searchWord: Swift.String?, sortKeys: [NautilusContentSDK.NautilusContentSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getFavoriteShopContentCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @objc final public func getFavoriteShopContentCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  final public func updateFavorite(addFavoriteContentIDs: [Swift.Int]?, removeFavoriteContentIDs: [Swift.Int]?, completion: @escaping (Swift.Result<Swift.Void, NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @objc final public func updateFavorite(addFavoriteContentIDs: [Swift.Int]?, removeFavoriteContentIDs: [Swift.Int]?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  final public func getFavoriteContentList(completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @objc final public func getFavoriteContentList(completion: @escaping ([NautilusContentSDK.NautilusContentInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getContentCategoryList(completion: @escaping (Swift.Result<[NautilusContentSDK.NautilusContentCategoryInfo], NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  @objc final public func getContentCategoryList(completion: @escaping ([NautilusContentSDK.NautilusContentCategoryInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func sendContentLog(contentLogs: [NautilusContentSDK.NautilusContentLog], completion: @escaping (Swift.Result<Swift.Void, NautilusContentSDK.NautilusContentError>) -> Swift.Void)
  final public func sendContentLog(contentLogs: [NautilusContentSDK.NautilusContentLog], completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@objc public enum NautilusContentType : Swift.Int {
  case common
  case `private`
  case favoriteShop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusContentCategoryInfo : ObjectiveC.NSObject {
  final public let categoryID: Swift.Int
  final public let parentCategoryID: Swift.Int
  final public let categoryName: Swift.String
  final public let sortNumber: Swift.Int
  final public let alias: Swift.String
  @objc deinit
}
@objc public class NautilusContentLog : ObjectiveC.NSObject {
  final public let content: NautilusContentSDK.NautilusContentInfo
  final public let logDate: Foundation.Date
  final public let logType: NautilusContentSDK.NautilusContentLogType
  public init(content: NautilusContentSDK.NautilusContentInfo, logType: NautilusContentSDK.NautilusContentLogType)
  @objc deinit
}
@objc public enum NautilusContentLogType : Swift.Int {
  case detail
  case url
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NautilusContentTabViewController : NautilusUISDK.NautilusAppTopBarController, NautilusUISDK.NautilusAppTopBarControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func appTopBar(_ appTopBar: NautilusUISDK.NautilusAppTopBar, viewForItemAt index: Swift.Int) -> NautilusUISDK.NautilusAppTopBarItemView
  @_Concurrency.MainActor(unsafe) @objc override final public func numberOfItems(in appTopBar: NautilusUISDK.NautilusAppTopBar) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func numberOfViewControllers(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func appTopBarController(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController, viewControllerAt index: Swift.Int) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) @objc final public func appTopBarController(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController, indexOfViewController viewController: UIKit.UIViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let NautilusContentErrorDomain: Swift.String
@objc public enum NautilusContentError : Swift.Int, Swift.Error {
  case unknown
  case connection
  case timedout
  case apiProcessError
  case httpConnection
  case parseFailure
  case userCancelled
  case invalidParamater
  case illegalConfiguration
  case invalidInstance
  case invalidParameters = 100
  case missingRequiredParameter = 101
  case unexpectedParameterFormat = 102
  case serverError = 200
  case serviceMaintenance = 901
  case unknownAPIService = 903
  case invalidUserPID = 905
  case developerError = 906
  case requiresLoginStatus = 907
  public var nautilusContentErrorCode: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusContentSortKey : ObjectiveC.NSObject {
  final public let keyName: NautilusContentSDK.NautilusContentSortKeyName
  final public let order: NautilusContentSDK.NautilusContentSortKeyOrder
  public init(keyName: NautilusContentSDK.NautilusContentSortKeyName, order: NautilusContentSDK.NautilusContentSortKeyOrder)
  @objc deinit
}
@objc public enum NautilusContentSortKeyName : Swift.Int {
  case publishStartDateTime
  case publishEndDateTime
  case sortNumber
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusContentSortKeyOrder : Swift.Int {
  case ascending
  case descending
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NautilusContentSDK.NautilusContentType : Swift.Equatable {}
extension NautilusContentSDK.NautilusContentType : Swift.Hashable {}
extension NautilusContentSDK.NautilusContentType : Swift.RawRepresentable {}
extension NautilusContentSDK.NautilusContentLogType : Swift.Equatable {}
extension NautilusContentSDK.NautilusContentLogType : Swift.Hashable {}
extension NautilusContentSDK.NautilusContentLogType : Swift.RawRepresentable {}
extension NautilusContentSDK.NautilusContentError : Swift.Equatable {}
extension NautilusContentSDK.NautilusContentError : Swift.Hashable {}
extension NautilusContentSDK.NautilusContentError : Swift.RawRepresentable {}
extension NautilusContentSDK.NautilusContentSortKeyName : Swift.Equatable {}
extension NautilusContentSDK.NautilusContentSortKeyName : Swift.Hashable {}
extension NautilusContentSDK.NautilusContentSortKeyName : Swift.RawRepresentable {}
extension NautilusContentSDK.NautilusContentSortKeyOrder : Swift.Equatable {}
extension NautilusContentSDK.NautilusContentSortKeyOrder : Swift.Hashable {}
extension NautilusContentSDK.NautilusContentSortKeyOrder : Swift.RawRepresentable {}
